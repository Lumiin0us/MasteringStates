{"ast":null,"code":"var _jsxFileName = \"/Users/abdurrehman/Desktop/ReactMaster/StatesMaster/react-states/chatApp/frontend/src/components/ChatPanel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./ChatPanel.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ChatPanel({\n  messages,\n  setMessages\n}) {\n  _s();\n  const [text, setText] = useState(\"\");\n  //   const [messages, setMessages] = useState([]);\n  const currTime = new Date().toLocaleTimeString([], {\n    hour: \"2-digit\",\n    minute: \"2-digit\"\n  });\n  useEffect(() => {\n    const chatBody = document.querySelector(\".chatBody\");\n    chatBody.scrollTop = chatBody.scrollHeight;\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatPanel\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatPanelText\",\n        children: \"Chat Panel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatBody\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatMessage\",\n          children: [message.message, /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"currentTime\",\n            children: message.time\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"chatInput\",\n          type: \"text\",\n          value: text,\n          onChange: e => {\n            setText(e.target.value);\n          },\n          onKeyDown: e => {\n            if (e.key === \"Enter\" && text.length >= 1) {\n              setMessages([...messages, {\n                message: text,\n                time: currTime\n              }]);\n              setText(\"\");\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (text.length >= 1) {\n              setMessages([...messages, {\n                message: text,\n                time: currTime\n              }]);\n              setText(\"\");\n            }\n          },\n          children: \"Enter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(ChatPanel, \"mMfSPvg3kjJBAgiHJD0l85bq0UA=\");\n_c = ChatPanel;\nexport default ChatPanel;\nvar _c;\n$RefreshReg$(_c, \"ChatPanel\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatPanel","messages","setMessages","_s","text","setText","currTime","Date","toLocaleTimeString","hour","minute","chatBody","document","querySelector","scrollTop","scrollHeight","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","time","type","value","onChange","e","target","onKeyDown","key","length","onClick","_c","$RefreshReg$"],"sources":["/Users/abdurrehman/Desktop/ReactMaster/StatesMaster/react-states/chatApp/frontend/src/components/ChatPanel.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./ChatPanel.css\";\n\nfunction ChatPanel({ messages, setMessages }) {\n  const [text, setText] = useState(\"\");\n  //   const [messages, setMessages] = useState([]);\n  const currTime = new Date().toLocaleTimeString([], {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  });\n  useEffect(() => {\n    const chatBody = document.querySelector(\".chatBody\");\n    chatBody.scrollTop = chatBody.scrollHeight;\n  }, [messages]);\n  return (\n    <>\n      <div className=\"chatPanel\">\n        <div className=\"chatPanelText\">Chat Panel</div>\n        <div className=\"chatBody\">\n          {messages.map((message, index) => (\n            <div className=\"chatMessage\" key={index}>\n              {message.message}\n              <span className=\"currentTime\">{message.time}</span>\n            </div>\n          ))}\n        </div>\n        <div className=\"chat\">\n          <input\n            className=\"chatInput\"\n            type=\"text\"\n            value={text}\n            onChange={(e) => {\n              setText(e.target.value);\n            }}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\" && text.length >= 1) {\n                setMessages([...messages, { message: text, time: currTime }]);\n                setText(\"\");\n              }\n            }}\n          />\n          <button\n            onClick={() => {\n              if (text.length >= 1) {\n                setMessages([...messages, { message: text, time: currTime }]);\n                setText(\"\");\n              }\n            }}\n          >\n            Enter\n          </button>\n        </div>\n      </div>\n    </>\n  );\n}\nexport default ChatPanel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}